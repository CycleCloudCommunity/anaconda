{
  "name": "anaconda",
  "description": "Installs/Configures anaconda",
  "long_description": "# anaconda cookbook\n\n**This cookbook is now up for adoption! See CONTRIBUTING.md for details.**\n\nChef cookbook for installing [Continuum Analytic](http://continuum.io/)'s\n[Anaconda](https://store.continuum.io/cshop/anaconda/): \"completely free Python\ndistribution for large-scale data processing, predictive analytics, and\nscientific computing\". Specifically:\n\n- Anaconda 2.2, 2.3, 4.4.0, 5.0.1 (the default)\n  - python2 or python3\n  - x86 or x86_64\n- Miniconda\n  - python2 or python3\n  - x86 or x86_64\n- Usage tested on Ubuntu, unittested on Debian, CentOS, and RedHat. See [rspec\n  tests](spec/default_spec.rb#L101) and [kitchen tests](.kitchen.yml#L18) for\n  the full list.\n\nThis also serves as an example for developing and testing Chef cookbooks. It\nuses:\n\n- ~[ChefDK](https://downloads.chef.io/chef-dk/)~ Given up on this for\n  now; uses standard RVM and Gemfile to manage installation\n  - chef-client 13.6\n  - [Berkshelf](http://berkshelf.com) for dependency resolution; 6.3\n  - [Test Kitchen](https://github.com/test-kitchen/test-kitchen) for\n    comprehensive testing across multiple platforms, with tests written in\n    [serverspec](http://serverspec.org); 1.19\n    - Docker, with\n      [kitchen-docker](https://github.com/portertech/kitchen-docker)\n      integration\n  - [Foodcritic](http://acrmp.github.io/foodcritic/) for style checking; 12.2\n- RSpec (3.7)/[Chefspec](https://github.com/sethvargo/chefspec) (7.1) for unit testing\n\nIn addition:\n\n- [Vagrant](https://www.vagrantup.com) to provide an out-of-the-box working\n  example; only tested with 2.0.\n\n## Requirements\n\nIf you want to just have a working Anaconda VM, install:\n\n- Vagrant\n  - [vagrant-triggers](https://github.com/emyl/vagrant-triggers)\n\nFor the full experience (e.g. running the test suite), also install:\n\n- [vagrant-omnibus](https://github.com/schisamo/vagrant-omnibus)\n- [vagrant-berkshelf](https://github.com/berkshelf/vagrant-berkshelf)\n- Docker\n\n## Quickstart\n\nThe sample [Vagrantfile](Vagrantfile) will build you an Anaconda VM with no\nchanges necessary; note it might take a few minutes to download the Anaconda\ninstaller itself.\n\n  ```bash\n  $> vagrant up --provision\n  ...\n\n  # the sample image includes `recipe[anaconda::shell_conveniences]`, which\n  # means conda is already in PATH via /etc/profile.d\n  $> vagrant ssh\n  $vagrant> conda --version\n  conda 4.3.30\n\n  # or you add it to PATH manually\n  $> vagrant ssh\n  $vagrant> export PATH=/opt/anaconda/5.0.1/bin:${PATH}\n  $vagrant> conda --version\n  conda 4.3.30\n  ```\n\nIt includes a Jupyter notebook server accessible at\n<http://33.33.33.123:8888>. **Token authentication is disabled in the\nquickstart Vagrant setup.**\n\nLastly, to use it in a cookbook:\n\n  ```ruby\n  include_recipe 'anaconda::default'\n  ```\n\n## Warning! If you're also using the [python](https://github.com/poise/python) cookbook...\n\nYou MUST include `recipe[anaconda::python_workaround]`, otherwise subsequent\nchef runs will fail. See [the\nissue](https://github.com/thmttch/chef-continuum-anaconda/issues/12) for\ndetails.\n\n## Usage, recipes, attributes, and resources\n\nThe main recipe is `anaconda::default`. Include it in your runlist, and it will\ninstall the package as well as any necessary dependencies.\n\nThe following are user-configurable attributes. Check\n[attributes/default.rb](attributes/default.rb) for more details.\n\n- `anaconda`\n  - `version`: the Anaconda version to install. Valid values are:\n    - 2.2.0\n    - 2.3.0\n    - 4.4.0\n    - 5.0.1\n    - latest (for miniconda only)\n  - `python`: which version of Python to install for. Valid values are:\n    - python2\n    - python3\n  - `flavor`: what architecture the instance is. Valid values are:\n    - nil (will autodetect)\n    - x86 (32-bit)\n    - x86_64 (64-bit)\n  - `install_type`: which Anaconda distribution to install. Valid values are:\n    - anaconda\n    - miniconda\n  - `install_root`: the parent directory of all anaconda installs. note that\n    individual installs go into `#{install_root}/#{version}`\n  - `accept_license`: **must be explicitly set to the string `yes` (there are\n    no defaults)**; any other value will reject the license.\n  - `owner`: the user who owns the install\n  - `group`: the group who owns the install\n  - `system_path`: adds the bin path to the system's profile.d directory\n\n### `recipe[anaconda::shell_conveniences]`\n\nInclude this to have the environment set for all users (login shells) via\n`/etc/profile.d`. Useful for development.\n\n### resource `anaconda_package`\n\nYou can use the `anaconda_package` resource to install new packages into the\nAnaconda environment:\n\n  ```ruby\n  # I don't know what 'astroid' is, just using it as a sample package\n  anaconda_package 'astroid' do\n    # the other supported action is `:remove`\n    action :install\n  end\n  ```\n\nSee the [resource definition](resources/package.rb) for additional options; in\ngeneral, all it does is present the same options as `conda install`/`conda\nremove`.\n\n### resource `anaconda_nbservice`\n\n**This only works with a full Anaconda installation! I.e. the notebook service\nwill not work out-of-the-box if installed with miniconda.**\n\nThe `anaconda_nbservice` will run a Jupyter notebook server as a runit service:\n\n  ```ruby\n  anaconda_nbservice 'notebook-server' do\n    # listen on all interfaces; there will be a warning since security is\n    # disabled\n    ip '*'\n    port '8888'\n\n    install_dir '/opt/jupyter/server'\n\n    service_action [ :enable, :start ]\n  end\n  ```\n\nThe standard configuration should be good enough, but you might need to write\nyour own run service template:\n\n  ```ruby\n  anaconda_nbservice 'server-with-custom-template' do\n    user jupyter_user\n    group jupyter_group\n\n    install_dir install_dir\n\n    template_cookbook 'your_cookbook'\n    # note that if your template name is TEMPLATE, then this value should be\n    # 'TEMPLATE\", but the file should be 'sv-TEMPLATE-run.erb'\n    run_template_name 'your_template_name'\n    run_template_opts({\n      ...\n    })\n\n    service_action [ :enable, :start ]\n  end\n  ```\n\n## Developer setup, config, and tests\n\nSee [TESTING.md](TESTING.md) for details.\n\n## Releases and issues\n\nStandard stuff:\n\n- master is the active version in development\n- releases are [made with\n  Github](https://github.com/thmttch/chef-continuum-anaconda/releases), and\n  `git tag`'ed\n- issues should be [opened in the Github issue\n  tracker](https://github.com/thmttch/chef-continuum-anaconda/issues)\n\n## TODO\n\n- https://github.com/poise/python is now deprecated, in favor of\n  https://github.com/poise/poise-python; see if the python workaround is still\n  necessary\n  - the supermarket version (https://supermarket.chef.io/cookbooks/python)\n    looks like it also points to the deprecated one\n\n## Author\n\nAuthor:: Matt Chu (matt.chu@gmail.com)\n",
  "maintainer": "Matt Chu",
  "maintainer_email": "matt.chu@gmail.com",
  "license": "MIT",
  "platforms": {
    "ubuntu": "= 16.4.0",
    "debian": "= 9.2.0",
    "centos": "= 7.4.0"
  },
  "dependencies": {
    "runit": ">= 0.0.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
  },
  "version": "0.7.3",
  "source_url": "https://github.com/thmttch/chef-continuum-anaconda",
  "issues_url": "https://github.com/thmttch/chef-continuum-anaconda/issues",
  "privacy": false,
  "chef_versions": [
    [
      ">= 12"
    ]
  ],
  "ohai_versions": [

  ],
  "gems": [

  ]
}
